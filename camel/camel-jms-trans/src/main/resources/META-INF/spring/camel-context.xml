<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

    <!-- mvn clean compile camel:run -->
    <camelContext id="myContext" xmlns="http://camel.apache.org/schema/spring" streamCache="true" trace="false">
        <jmxAgent id="agent" disabled="true"/>
        <!-- no onException: let TransactionErrorHandler to handle redeliveries (max 6) and TransactionManager to handle rollbacks -->

        <!-- custom Camel redelivery policy applied to each of the 6 default retries -->
        <!--onException>
            <exception>java.lang.Exception</exception>
            <redeliveryPolicy maximumRedeliveries="10" redeliveryDelay="1000" retryAttemptedLogLevel="WARN"/>
            <handled>
                <constant>true</constant>
            </handled>
            <log message="Exception caught" loggingLevel="ERROR"/>
            <rollback markRollbackOnly="true"/>
        </onException-->

        <route id="sendRoute">
            <from uri="timer:foo?repeatCount=1000&amp;period=1"/>
            <to uri="jms:queue:input"/>
        </route>

        <route id="bridgeRoute">
            <from uri="jms:queue:input"/>
            <!-- we can also remove transacted because the JMS Component has a transaction
                oriented endpoint that is capable of automatically create a transaction -->
            <transacted/>
            <process ref="msgProcessor"/>
            <to uri="jms:queue:output"/>
        </route>

    </camelContext>

    <bean id="msgProcessor" class="it.fvaleri.integ.MsgProcessor">
        <property name="statsEveryNMessages" value="100"/>
        <property name="runComplexProcessing" value="false"/>
        <property name="throwErrorAtMessage" value="-1"/>
    </bean>

    <!-- external TX manager without XA support -->
    <bean id="txManager" class="org.springframework.jms.connection.JmsTransactionManager">
        <property name="connectionFactory" ref="pooledCF"/>
    </bean>

    <bean id="shutdown" class="org.apache.camel.impl.DefaultShutdownStrategy">
		<property name="timeout" value="10"/>
	</bean>

    <bean id="amqCF" class="org.apache.activemq.ActiveMQConnectionFactory">
        <!-- use vm://localhost or tcp://localhost:61616?trace=true with an external broker for protocol debugging;
            set maxReconnectAttempts=0 to let the PooledConnectionFactory to renew stale connections;
            prefetchPolicy: large value when having high volume of messages, one in case of XA trans or large messages -->
        <property name="brokerURL" value="failover:(vm://localhost)?jms.prefetchPolicy.all=500"/>
        <property name="userName" value="admin"/>
        <property name="password" value="admin"/>
    </bean>

    <!-- using a PooledConnectionFactory with TXs we don't create a new TCP connection for every message;
        when using durable topic subscriber the connection bear a clientId and cannot be shared with other consumers,
        so you must use a dedicated component setup setting (maxConnections=1) and (maxConcurrentConsumers=1) -->
    <bean id="pooledCF" class="org.apache.activemq.pool.PooledConnectionFactory" init-method="start" destroy-method="stop">
        <property name="connectionFactory" ref="amqCF"/>
        <!-- set (maxConnections = number of JMS routes) to avoid unused connections -->
        <property name="maxConnections" value="2"/>
        <!-- always maintain connections opened (default: 30s) -->
        <property name="idleTimeout" value="0"/>
        <!-- set (maxActiveSessionPerConn at least = maxConcConsumers+1) to avoid session exhaustion -->
        <property name="maximumActiveSessionPerConnection" value="11"/>
    </bean>

    <bean id="jms" class="org.apache.camel.component.jms.JmsComponent">
        <property name="configuration">
            <bean class="org.apache.camel.component.jms.JmsConfiguration">
                <property name="connectionFactory" ref="pooledCF"/>
                <!-- to disable transacted session set false and remove txManager -->
                <property name="transacted" value="true"/>
                <property name="transactionManager" ref="txManager"/>
                <property name="maxConcurrentConsumers" value="10"/>
                <!-- CACHE_NONE: consumer closed on every message (blocking call) and broker redelivery only;
                    CACHE_CONSUMER: XA transactions are not supported and a mix of client/broker redelivery is used -->
                <property name="cacheLevelName" value="CACHE_CONSUMER"/>
                <!-- with transacted session redeliveries are handled by Camel and ack mode is ignored;
                    CLIENT_ACKNOWLEDGE: ack is sent to the broker *after* Camel has processed the message;
                    AUTO_ACKNOWLEDGE: message is acked *before* dispatching to Camel (always risk of losing it) -->
                <property name="acknowledgementModeName" value="AUTO_ACKNOWLEDGE"/>
                <!-- set high value to avoid too many connections/s when having lots of concurrent consumers -->
                <property name="receiveTimeout" value="100000"/>
                <!-- set true to enforce InOnly exchange mode on consumers avoiding deadlocks
                    caused by the producer expecting a reply and never ending the transaction -->
                <property name="disableReplyTo" value="true"/>
            </bean>
        </property>
    </bean>

</beans>
